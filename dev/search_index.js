var documenterSearchIndex = {"docs":
[{"location":"function_index/#Index","page":"Function index","title":"Index","text":"","category":"section"},{"location":"function_index/","page":"Function index","title":"Function index","text":"","category":"page"},{"location":"function_index/","page":"Function index","title":"Function index","text":"Modules = [DiffFusionServer]","category":"page"},{"location":"function_index/#DiffFusionServer._INFO_STRING","page":"Function index","title":"DiffFusionServer._INFO_STRING","text":"const _INFO_STRING\n\nAn info string with API details.\n\n\n\n\n\n","category":"constant"},{"location":"function_index/#DiffFusionServer._NO_HTTP_ERROR","page":"Function index","title":"DiffFusionServer._NO_HTTP_ERROR","text":"const _NO_HTTP_ERROR\n\nDefault return status code.\n\n\n\n\n\n","category":"constant"},{"location":"function_index/#DiffFusionServer.Options","page":"Function index","title":"DiffFusionServer.Options","text":"mutable struct Options\n    is_busy::Bool\nend\n\nA container that holds flags and data which control the behaviour of the router.\n\nThe options object is created at inception of the router and passed to the various handler functions.\n\nOptions element is_busy specifies that the server currently does not accept POST requests. The flag may be set via the is_busy header field in a POST request. The flag may be de-activated via the is_busy header field in (subsequent) GET request.\n\n\n\n\n\n","category":"type"},{"location":"function_index/#DiffFusionServer._check_for_alias_in_repository-Tuple{AbstractString, AbstractDict}","page":"Function index","title":"DiffFusionServer._check_for_alias_in_repository","text":"_check_for_alias_in_repository(alias::AbstractString, d::AbstractDict)\n\nReturn valid alias from repository or a response that returns error message.\n\n\n\n\n\n","category":"method"},{"location":"function_index/#DiffFusionServer._check_for_header_field-Tuple{HTTP.Messages.Request, AbstractString}","page":"Function index","title":"DiffFusionServer._check_for_header_field","text":"_check_for_header_field(req::HTTP.Request, key::AbstractString)\n\nReturn valid alias from rquest header or a response that returns error message.\n\n\n\n\n\n","category":"method"},{"location":"function_index/#DiffFusionServer._error_alias_not_found-Tuple{AbstractString}","page":"Function index","title":"DiffFusionServer._error_alias_not_found","text":"_error_alias_not_found(alias::AbstractString)\n\nCreate error response for missing alias.\n\n\n\n\n\n","category":"method"},{"location":"function_index/#DiffFusionServer._error_build_async_fail-Tuple{AbstractString, Exception}","page":"Function index","title":"DiffFusionServer._error_build_async_fail","text":"_error_build_async_fail(alias::AbstractString, e::Exception)\n\nCreate an error response for a failing BUILD_ASYNC operation.\n\n\n\n\n\n","category":"method"},{"location":"function_index/#DiffFusionServer._error_build_object_fail-Tuple{AbstractString, Exception}","page":"Function index","title":"DiffFusionServer._error_build_object_fail","text":"_error_build_object_fail(alias::AbstractString, e::Exception)\n\nCreate an error response for a failing BUILD operation.\n\nThis error indicates a wrong DiffFuion call.\n\n\n\n\n\n","category":"method"},{"location":"function_index/#DiffFusionServer._error_bulk_element_list_not_found-Tuple{Any}","page":"Function index","title":"DiffFusionServer._error_bulk_element_list_not_found","text":"_error_bulk_element_list_not_found(elem::Any)\n\nCreate an error response for a missing list containing alias and request details for usee in bulk request.\n\n\n\n\n\n","category":"method"},{"location":"function_index/#DiffFusionServer._error_bulk_list_not_found-Tuple{Any}","page":"Function index","title":"DiffFusionServer._error_bulk_list_not_found","text":"_error_bulk_list_not_found(body::Any)\n\nCreate an error response for a missing list for a bulk request.\n\n\n\n\n\n","category":"method"},{"location":"function_index/#DiffFusionServer._error_create_json_fail-Tuple{AbstractString, Exception}","page":"Function index","title":"DiffFusionServer._error_create_json_fail","text":"_error_create_json_fail(alias::AbstractString, e::Exception)\n\nCreate error response for a failing JSON read operation.\n\n\n\n\n\n","category":"method"},{"location":"function_index/#DiffFusionServer._error_create_json_string_fail-Tuple{AbstractString, Exception}","page":"Function index","title":"DiffFusionServer._error_create_json_string_fail","text":"_error_create_json_string_fail(alias::AbstractString, e::Exception)\n\nCreate an error response for a failing JSON write.\n\n\n\n\n\n","category":"method"},{"location":"function_index/#DiffFusionServer._error_create_ordered_dict_fail-Tuple{AbstractString, Exception}","page":"Function index","title":"DiffFusionServer._error_create_ordered_dict_fail","text":"_error_create_ordered_dict_fail(alias::AbstractString, e::Exception)\n\nCreate an error response for a failing dictionary setup.\n\nThis error may occur during COPY operation.\n\n\n\n\n\n","category":"method"},{"location":"function_index/#DiffFusionServer._error_key_not_found-Tuple{AbstractString}","page":"Function index","title":"DiffFusionServer._error_key_not_found","text":"_error_key_not_found(key::AbstractString)\n\nCreate error response for missing http header key.\n\n\n\n\n\n","category":"method"},{"location":"function_index/#DiffFusionServer._error_object_serialisation_fail-Tuple{AbstractString, Exception}","page":"Function index","title":"DiffFusionServer._error_object_serialisation_fail","text":"_error_object_serialisation_fail(alias::AbstractString, e::Exception)\n\nCreate an error response for a failing object serialisation.\n\nThis error indicates an unsupported object beeing applied to DiffFusion's serialisation method.\n\n\n\n\n\n","category":"method"},{"location":"function_index/#DiffFusionServer._error_operation_not_implemented-Tuple{AbstractString}","page":"Function index","title":"DiffFusionServer._error_operation_not_implemented","text":"_error_operation_not_implemented(op::AbstractString)\n\nCreate error response for unknown server operation in http header.\n\nAllowed operations are COPY and BUILD and BUILD_ASYNC.\n\n\n\n\n\n","category":"method"},{"location":"function_index/#DiffFusionServer._error_option_not_implemented-Tuple{AbstractString, AbstractString}","page":"Function index","title":"DiffFusionServer._error_option_not_implemented","text":"_error_option_not_implemented(option_field::AbstractString, option_value::AbstractString)\n\nCreate error response for unknown server option/value combination in http header.\n\n\n\n\n\n","category":"method"},{"location":"function_index/#DiffFusionServer._error_server_is_busy-Tuple{}","page":"Function index","title":"DiffFusionServer._error_server_is_busy","text":"_error_server_is_busy()\n\nCreate an error response for a rejected (POST) operation due to is_busy flag.\n\n\n\n\n\n","category":"method"},{"location":"function_index/#DiffFusionServer.api_bulk_get-Tuple{HTTP.Messages.Request, AbstractDict, DiffFusionServer.Options}","page":"Function index","title":"DiffFusionServer.api_bulk_get","text":"api_bulk_get(\n    request::HTTP.Request,\n    repository::AbstractDict,\n    options::Options,\n    )\n\nReturn a list of objects for a list of aliases.\n\nThis operation does not modify the server repository.\n\nRequest header must contain field 'op'. Value of field 'op' is 'COPY' or 'BUILD'.\n\nRequest body must contain a list of 'alias'. The list of 'alias' is iterated. For each 'alias' the corresponding object is retrieved from the server repository.\n\nHandling of each individual object follows method api_get.\n\nThe result is a Vector of objects. This result is written to JSON and returned via the response body.\n\n\n\n\n\n","category":"method"},{"location":"function_index/#DiffFusionServer.api_bulk_post-Tuple{HTTP.Messages.Request, AbstractDict, DiffFusionServer.Options}","page":"Function index","title":"DiffFusionServer.api_bulk_post","text":"api_bulk_post(\n    request::HTTP.Request,\n    repository::AbstractDict,\n    options::Options,\n    )\n\nCreate and store a list of objects for a list of aliases.\n\nRequest header must contain field 'op'. Value of field 'op' is 'COPY' or 'BUILD'.\n\nRequest body must be a JSON representation. The JSON object must be of the form\n\n[\n    [alias_1, obj_1],\n    [alias_2, obj_2],\n    ...\n]\n\nThe elements alias_k, represent the object aliases used to store the object in the server repository.\n\nThe elements obj_k are processed according to COPY or BUILD operation and following the methodology in api_post.\n\n\n\n\n\n","category":"method"},{"location":"function_index/#DiffFusionServer.api_delete-Tuple{HTTP.Messages.Request, AbstractDict, DiffFusionServer.Options}","page":"Function index","title":"DiffFusionServer.api_delete","text":"api_delete(\n    request::HTTP.Request,\n    repository::AbstractDict,\n    options::Options,\n    )\n\nDelete an object from repository.\n\nRequest header must contain field 'alias'. The value of field 'alias' is the object alias of requested object in the server repository.\n\n\n\n\n\n","category":"method"},{"location":"function_index/#DiffFusionServer.api_get-Tuple{HTTP.Messages.Request, AbstractDict, DiffFusionServer.Options}","page":"Function index","title":"DiffFusionServer.api_get","text":"api_get(\n    request::HTTP.Request,\n    repository::AbstractDict,\n    options::Options,\n    )\n\nReturn the object with requested alias header field in body of response.\n\nThis operation does not modify the server repository.\n\nRequest header must contain fields 'alias' and 'op'. The value of field 'alias' is the object alias of requested object in the server repository. Value of field 'op' is 'COPY' or 'BUILD'.\n\nFor COPY operation, the requested data is directly written to JSON format.\n\nFor BUILD operation, the requested data is first serialised using DiffFusion serialise operation. Then the serialised object is written to JSON format.\n\nThe resulting JSON object is returned via the response body.\n\n\n\n\n\n","category":"method"},{"location":"function_index/#DiffFusionServer.api_get_aliases-Tuple{HTTP.Messages.Request, AbstractDict, DiffFusionServer.Options}","page":"Function index","title":"DiffFusionServer.api_get_aliases","text":"api_get_aliases(\n    request::HTTP.Request,\n    repository::AbstractDict,\n    options::Options,\n    )\n\nReturn all aliases from the repository in body of response.\n\n\n\n\n\n","category":"method"},{"location":"function_index/#DiffFusionServer.api_get_info-Tuple{HTTP.Messages.Request}","page":"Function index","title":"DiffFusionServer.api_get_info","text":"api_get_info(request::HTTP.Request)\n\nReturn an info string about the API as response.\n\n\n\n\n\n","category":"method"},{"location":"function_index/#DiffFusionServer.api_post-Tuple{HTTP.Messages.Request, AbstractDict, DiffFusionServer.Options}","page":"Function index","title":"DiffFusionServer.api_post","text":"api_post(\n    request::HTTP.Request,\n    repository::AbstractDict,\n    options::Options,\n    )\n\nCreate and store an object for a given alias.\n\nRequest header must contain fields 'alias' and 'op'. The value of field 'alias' is the object alias used to store the object in the server repository. Value of field 'op' is 'COPY' or 'BUILD'.\n\nRequest body must be a JSON representation. The data is normalised by first applying a serialise operation.\n\nFor COPY operation, the normalised data is directly stored in the server repository.\n\nFor BUILD operation, the normalised data is deserialised via DiffFusion operations. The result is the stored in the server repository.\n\n\n\n\n\n","category":"method"},{"location":"function_index/#DiffFusionServer.initial_options","page":"Function index","title":"DiffFusionServer.initial_options","text":"initial_options(\n    is_busy::Bool = false,\n    )\n\nCreate an Options object and initialise with default settings. \n\n\n\n\n\n","category":"function"},{"location":"function_index/#DiffFusionServer.initial_repository-Tuple{}","page":"Function index","title":"DiffFusionServer.initial_repository","text":"initial_repository()\n\nCreate an object repository and initialise with some static objects.\n\n\n\n\n\n","category":"method"},{"location":"function_index/#DiffFusionServer.router","page":"Function index","title":"DiffFusionServer.router","text":"router(\n    api_path = _DEFAULT_API_PATH,\n    api_version = _DEFAULT_API_VERSION,\n    )\n\nCreate a handler function router and an initial server repository repository for that router. The function returns the named tuple\n\n(router, repository)\n\nThe router is configured to accept requests for the specified end points. Requests are passed on to the corresponding API functions for processing.\n\nThe router represents a Handler function which is typically used in HTTP.serve(...).\n\nThe repository is a reference to the object repository. The object repository is queried and modified by subsequent requests. The current state of the object repository can be viewed (and modified) by means of the repository object reference.\n\n\n\n\n\n","category":"function"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = DiffFusionServer","category":"page"},{"location":"#DiffFusionServer","page":"Home","title":"DiffFusionServer","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for DiffFusionServer.","category":"page"},{"location":"#Getting-Started","page":"Home","title":"Getting Started","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"In this section, we document the usage of DiffFusionServer via Julia. Alternatively, you can use DiffFusionServer via Docker without the need to install Julia.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The DiffFusionServer package uses HTTP and Sockets packages. These packages need to be added to the current project.","category":"page"},{"location":"","page":"Home","title":"Home","text":"using Pkg\nPkg.add(url=\"https://github.com/frame-consulting/DiffFusionServer.jl\")\nPkg.add(\"HTTP\")\nPkg.add(\"Sockets\")","category":"page"},{"location":"","page":"Home","title":"Home","text":"Start a HTTP server.","category":"page"},{"location":"","page":"Home","title":"Home","text":"using DiffFusionServer\nusing HTTP\nusing Sockets\n\nrouter = DiffFusionServer.router().router\nserver = HTTP.serve!(router, Sockets.localhost, 2024)","category":"page"},{"location":"","page":"Home","title":"Home","text":"Now you can visit the end point localhost:2024 with your browser. This should display an info text of the API.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Alternatively, you can query the server via HTTP in Julia.","category":"page"},{"location":"","page":"Home","title":"Home","text":"resp = HTTP.get(\"http://localhost/api/v1/info\")\ndisplay(resp)","category":"page"},{"location":"","page":"Home","title":"Home","text":"Finally, you can close the server via","category":"page"},{"location":"","page":"Home","title":"Home","text":"close(server)","category":"page"},{"location":"#Use-Docker-to-Run-the-Server","page":"Home","title":"Use Docker to Run the Server","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"A convenient way to run the DiffFusionServer is by using Docker. A Docker image can be build locally or obtained from Docker Hub.","category":"page"},{"location":"#Build-Docker-Image","page":"Home","title":"Build Docker Image","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Download or clone the DiffFusionServer source code and go to the docker folder.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The image can be build via","category":"page"},{"location":"","page":"Home","title":"Home","text":"docker build --pull --rm -t diff-fusion-server:latest .","category":"page"},{"location":"","page":"Home","title":"Home","text":"A container can be started from the built image via","category":"page"},{"location":"","page":"Home","title":"Home","text":"docker run --rm -it -p 2024:2024 diff-fusion-server:latest --port 2024","category":"page"},{"location":"","page":"Home","title":"Home","text":"The server is listening on port 2024. If you can access the info page via browser then everything is set up.","category":"page"},{"location":"#Pull-Docker-Image","page":"Home","title":"Pull Docker Image","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Alternatively, you can pull a pre-build Docker image via","category":"page"},{"location":"","page":"Home","title":"Home","text":"docker pull sschlenkrich/diff-fusion-server:latest","category":"page"},{"location":"","page":"Home","title":"Home","text":"A container can be started from the pulled image via","category":"page"},{"location":"","page":"Home","title":"Home","text":"docker run --rm -it -p 2024:2024 sschlenkrich/diff-fusion-server:latest --port 2024","category":"page"},{"location":"","page":"Home","title":"Home","text":"The server is listening on port 2024. If you can access the info page via browser then everything is set up.","category":"page"},{"location":"#API-Reference","page":"Home","title":"API Reference","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This is a summary of the API to serve DiffFusion functionality via HTTP.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The API implements an object repository. Individual objects are accessible via their 'alias' key.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Endpoints:","category":"page"},{"location":"","page":"Home","title":"Home","text":"GET: [api_path]/[version]/info","category":"page"},{"location":"","page":"Home","title":"Home","text":"Return this info message.","category":"page"},{"location":"","page":"Home","title":"Home","text":"GET: [api_path]/[version]/aliases","category":"page"},{"location":"","page":"Home","title":"Home","text":"Return the list of aliases in object repository.","category":"page"},{"location":"","page":"Home","title":"Home","text":"POST: [api_path]/[version]/ops","category":"page"},{"location":"","page":"Home","title":"Home","text":"This method implements the main API logic:\nLoad request body into OrderedDict 'd'.\nRetrieve 'alias' field from  request header.\nRetrieve operation field 'op' from request header.\nProcess OrderedDict 'd' according to operation 'op'.\nStore resulting object in object repository with key 'alias'.\nOperations 'op' are\n'COPY': copy body as OrderedDict to repository,\n'BUILD': de-serialise object and store in repository","category":"page"},{"location":"","page":"Home","title":"Home","text":"POST: [api_path]/[version]/bulk","category":"page"},{"location":"","page":"Home","title":"Home","text":"This method implements the POST method for a list of object.\nRequest body contains a list of two-element lists.\nEach two-element list contains the object 'alias' and the dictionary specifying the object creation.\nObject creation follows the method for single-object POST method.","category":"page"},{"location":"","page":"Home","title":"Home","text":"GET: [api_path]/[version]/ops","category":"page"},{"location":"","page":"Home","title":"Home","text":"Retrieve 'alias' field from  request header, serialise object from repository and return via body.","category":"page"},{"location":"","page":"Home","title":"Home","text":"GET: [api_path]/[version]/bulk","category":"page"},{"location":"","page":"Home","title":"Home","text":"This method implements the GET method for a list of objects.\nRequest body contains a list of 'alias' keys.\nResponse body contains a list of serialised objects.","category":"page"},{"location":"","page":"Home","title":"Home","text":"DELETE: [api_path]/[version]/ops/","category":"page"},{"location":"","page":"Home","title":"Home","text":"Retrieve 'alias' field from  request header and delete the object with given alias.","category":"page"},{"location":"#Using-DiffFusion.jl-via-API","page":"Home","title":"Using DiffFusion.jl via API","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The usage of the API is illustrated by Python and Julia notebooks in the examples folder.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The notebooks can be run via (Image: Binder) or locally.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Additional examples are documented via the test suite.","category":"page"}]
}
